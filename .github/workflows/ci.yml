name: CI

on:
  pull_request:
    branches: [ master, development ]
  pull_request_target:
    branches: [ master, development ]
  push:
    branches: [ master, development ]

jobs:
  gradle-cli:
    runs-on: ubuntu-latest

    permissions:
      checks: write           # ✅ create check runs
      pull-requests: write    # ✅ comment on PRs
      contents: read          # ✅ read repo contents

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run Tests
        run: ./gradlew clean test --no-daemon --stacktrace

      - name: Test Reporter
        if: ${{ !cancelled() }}
        uses: dorny/test-reporter@v2
        with:
          name: Gradle Tests
          path: build/test-results/test/TEST-*.xml
          reporter: java-junit

      - name: Configure AWS credentials
        if: ${{ success()}}
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1   # ✅ Required for PUBLIC ECR

      - name: Log in to Amazon Public ECR
        if: ${{ success()}}
        run: |
          aws ecr-public get-login-password \
            | docker login --username AWS --password-stdin public.ecr.aws

      - name: Build, tag, and push image to Public ECR
        if: ${{ success()}}
        env:
          ECR_ALIAS: ${{ secrets.ECR_PUBLIC_ALIAS }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          SHORT_SHA=$(echo "$GITHUB_SHA" | cut -c1-7)
          IMAGE_URI=public.ecr.aws/$ECR_ALIAS/$ECR_REPOSITORY

          docker build -t $IMAGE_URI:$SHORT_SHA .
          docker push $IMAGE_URI:$SHORT_SHA

          # Also push latest
          docker tag $IMAGE_URI:$SHORT_SHA $IMAGE_URI:latest
          docker push $IMAGE_URI:latest

      - name: Show image URIs
        if: ${{ success()}}
        env:
          ECR_ALIAS: ${{ secrets.ECR_PUBLIC_ALIAS }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          SHORT_SHA=$(echo "$GITHUB_SHA" | cut -c1-7)
          echo "Published image:"
          echo "- public.ecr.aws/$ECR_ALIAS/$ECR_REPOSITORY:$SHORT_SHA"
          echo "- public.ecr.aws/$ECR_ALIAS/$ECR_REPOSITORY:latest"
